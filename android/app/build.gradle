apply plugin: "com.android.application"

import com.android.build.OutputFile
import groovy.json.JsonSlurper

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"]
 * ]
 */

/**
 * Set this to true to create three separate APKs instead of one:
 *   - A universal APK that works on all devices
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

def getConfig() {
    def slurper = new JsonSlurper()
    def config = slurper.parse(file('../../config/client-defaults.json'))
    def custom = slurper.parse(file('../../config/client.json'))

    custom.each { key, value -> config.put(key, value) }

    return config
}

def config = getConfig();

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

project.ext.vectoricons = [
    iconFontNames: [ "MaterialIcons.ttf", "EvilIcons.ttf" ]
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "chat.belong.hello"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 75
        versionName "1.9"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }

        resValue "string", "app_name", config.app_name
        resValue "string", "app_host", config.server.host
        resValue "string", "app_protocol", config.server.protocol
    }

    splits {
        abi {
            enable enableSeparateBuildPerCPUArchitecture
            universalApk true
            reset()
            include "armeabi-v7a", 'x86'
        }
    }

    signingConfigs {
        release {
            storeFile file(SB_RELEASE_STORE_FILE)
            storePassword SB_RELEASE_STORE_PASSWORD
            keyAlias SB_RELEASE_KEY_ALIAS
            keyPassword SB_RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        prod {
            manifestPlaceholders = [
                GEO_API_KEY: "AIzaSyCtacAKOwsEbCZrZEkXeQfqWmIB-McRl0Y"
            ]
        }

        dev {
            applicationIdSuffix ".dev"

            resValue "string", "app_name", config.dev.app_name
            manifestPlaceholders = [
                GEO_API_KEY: "AIzaSyB09hPH7I2boNq-Jyg5aoWImQ_PboEvOMs"
            ]
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile project(':react-native-fabric')
    compile project(':react-native-fbsdk')
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.google.android.gms:play-services-auth:8.4.0'
    compile 'com.google.android.gms:play-services-gcm:8.4.0'
    compile 'com.google.android.gms:play-services-location:8.4.0'
    compile 'com.squareup.okhttp3:okhttp:3.0.1'
    compile 'com.samskivert:jmustache:1.12'
    compile 'com.facebook.react:react-native:+'  // From node_modules

    compile('com.facebook.android:facebook-android-sdk:4.14.0') {
        exclude group: 'com.parse.bolts', module: 'bolts-android';
        exclude group: 'com.parse.bolts', module: 'bolts-tasks';
    }

    compile('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {
        transitive = true;
    }

    compile(project(':react-native-image-chooser')) {
        exclude group: 'com.facebook.react', module: 'react-native';
    }
}

apply plugin: 'com.google.gms.google-services'
